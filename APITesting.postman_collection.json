{
	"info": {
		"_postman_id": "703e8728-88d3-4612-a5e1-5b2b08c8d0aa",
		"name": "API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13297062",
		"_collection_link": "https://grey-star-632488.postman.co/workspace/CNATSJune2025~53bc9918-f6ad-4e37-8925-660379895562/collection/13297062-703e8728-88d3-4612-a5e1-5b2b08c8d0aa?action=share&source=collection_link&creator=13297062"
	},
	"item": [
		{
			"name": "GetProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for the existence of the 'products' array and its structure\r",
							"pm.test(\"Response contains 'products' array with correct structure\", () => {\r",
							"    pm.expect(response.products).to.exist;\r",
							"    pm.expect(response.products).to.be.an('array');\r",
							"\r",
							"    response.products.forEach(product => {\r",
							"        pm.expect(product).to.have.all.keys(\r",
							"            'id', 'title', 'description', 'category', 'price', 'discountPercentage', \r",
							"            'rating', 'stock', 'tags', 'brand', 'sku', 'weight', 'dimensions', \r",
							"            'warrantyInformation', 'shippingInformation', 'availabilityStatus', \r",
							"            'reviews', 'returnPolicy', 'minimumOrderQuantity', 'meta', 'images', 'thumbnail'\r",
							"        );\r",
							"        pm.expect(product.dimensions).to.have.all.keys('width', 'height', 'depth');\r",
							"        pm.expect(product.reviews).to.be.an('array');\r",
							"        product.reviews.forEach(review => {\r",
							"            pm.expect(review).to.have.all.keys('rating', 'comment', 'date', 'reviewerName', 'reviewerEmail');\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetProductByid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"\r",
							"    pm.expect(pm.response.text()).to.include(\"Mirror\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check JSON Data\", function () {\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(15);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check last name\", function () {\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.data.last_name).to.eql(\"Howell\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Check if any review has rating 5\r",
							"\r",
							"let hasFiveStar = jsonData.reviews.some(review => review.rating === 5);\r",
							"\r",
							"// Check if any review has rating 5\r",
							"\r",
							"let hasPleasedComment = jsonData.reviews.some(review =>\r",
							"\r",
							"    review.comment.toLowerCase().includes(\"pleased\"));\r",
							"\r",
							"\r",
							"pm.test(\"At least one review has a rating of 5\", function () {\r",
							"\r",
							"    pm.expect(hasFiveStar).to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"At least one review comment contains the word 'Pleased'\", function () {\r",
							"\r",
							"    pm.expect(hasPleasedComment).to.be.true;\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/20",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"20"
					]
				}
			},
			"response": []
		},
		{
			"name": "SearchByPhone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for response schema\r",
							"pm.test(\"Response schema is valid\", () => {\r",
							"    pm.expect(response).to.have.all.keys('products', 'total', 'skip', 'limit');\r",
							"    pm.expect(response.products).to.be.an('array');\r",
							"\r",
							"    response.products.forEach(product => {\r",
							"        pm.expect(product).to.have.all.keys(\r",
							"            'id', 'title', 'description', 'category', 'price', \r",
							"            'discountPercentage', 'rating', 'stock', 'tags', \r",
							"            'brand', 'sku', 'weight', 'dimensions', \r",
							"            'warrantyInformation', 'shippingInformation', \r",
							"            'availabilityStatus', 'reviews', 'returnPolicy', \r",
							"            'minimumOrderQuantity', 'meta', 'images', 'thumbnail'\r",
							"        );\r",
							"        pm.expect(product.dimensions).to.have.all.keys('width', 'height', 'depth');\r",
							"        pm.expect(product.reviews).to.be.an('array');\r",
							"\r",
							"        product.reviews.forEach(review => {\r",
							"            pm.expect(review).to.have.all.keys('rating', 'comment', 'date', 'reviewerName', 'reviewerEmail');\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/search?q=phone",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "phone"
						},
						{
							"key": "availabilityStatus",
							"value": "In Stock",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Getcategories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test for response body structure\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test for each category object structure\r",
							"response.forEach(category => {\r",
							"    pm.test(`Category object has slug, name, and url`, () => {\r",
							"        pm.expect(category).to.have.all.keys('slug', 'name', 'url');\r",
							"        pm.expect(category.slug).to.be.a('string');\r",
							"        pm.expect(category.name).to.be.a('string');\r",
							"        pm.expect(category.url).to.be.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/categories",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"\r",
							"pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Prathvi\",\r\n    \"description\": \"This is the description of my product.\",\r\n    \"category\": \"furniture\",\r\n    \"price\": 4.99,\r\n    \"discountPercentage\": 9.33,\r\n    \"rating\": 5.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyjson.com/products/add",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Smitha Product\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyjson.com/products/20",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"20"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteProduct",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/20",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"20"
					]
				}
			},
			"response": []
		}
	]
}
